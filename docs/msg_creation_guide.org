
* Introduction

None of the documents out in the wild really do a good job talking
about the rights and wrongs of AIS message creation. This is my
attempt to capture best practices. This is based on experience
implementing pure python and pure C++ decoders of AIS, talking ESR
through his writing of a pure python decoder and the GPSD C decoder.
The real solution is to introduce a proper language for describing AIS
messages, but the majority of the community does not see this as a
requirement.

Unsorted initial list:

- All messages must have their overall content broadcast in byte
  aligned message, so make your message clear how it byte aligns.  A
  variable length spare at the end is a good way to do this.
- Do not pad more than to then next byte on the end of your message.
  There is no reason to fill out to the end of a slot.  Extra space
  only increases the chance that VHF noise will corrupt the message.
- Avoid defaults or common with lots of 1 bits in them.  This will
  trigger bit stuffing more often and cause problems.
- Make sure that values that are needed occur before they are used.
  Otherwise you are forcing people code to require random access to
  the bit stream.
- Provide example messages, bit streams, and decoded values for people
  to test against.
- Provide an example database SQL CREATE command for your message.
  This will force you to think carefully about your data structures.
  If it has spatial geometry, include both a traditional SQL
  definition and a PostGIS spatial version.
- Include a diagram if appropriate!
- Do not reference paywalled documents (e.g. ITU 1371)
- Include the lookup tables locally for things that have tables.  Do
  not just blindly refer to things like the Beaufort scale.  That is
  not helpful.
- State all units.  For example, you can *not* just say "Salinity".
- Use SI units.  Using things like nautical miles or chains for
  distances is just bad.  Use km or m and let the software
  presentation interface do the unit conversions to what ever.
- Just because it is done in ITU 1371 does not mean it is a good
  idea.  e.g. Message 22 and 23.
- On messages 25 and 26, use an DAC/FI pair (aka app id).
  Unstructured binary without a specification document is just plain
  bad.  Are we supposed to use the MMSI to id the content?
